---
description:
globs:
alwaysApply: false
---
# Production Deployment Workflow Rule

## CRITICAL DEPLOYMENT PROTOCOL - MANDATORY ENFORCEMENT

This rule enforces the mandatory 5-step deployment workflow for the chat-frontier-flora project to prevent critical failures and maintain production stability.

### üö® ABSOLUTE RULES - NEVER VIOLATE

1. **NEVER merge to main without preview testing**
   - Direct push to main is a CRITICAL FAILURE
   - AI must STOP immediately if attempting to bypass workflow
   - Always create PR for preview deployment first

2. **ALWAYS run Expo from apps/web directory**
   - Commands MUST be run from `apps/web`, never from root
   - Running from root causes "Module not found" errors
   - Before ANY Expo command: `cd apps/web` first

3. **ALWAYS verify compilation success**
   - ‚úÖ REQUIRED: "web compiled with 1 warning" (vm warning is normal)
   - ‚ùå FAILURE: "web compiled with 1 error" means BROKEN - must fix first

### üìã MANDATORY 5-STEP WORKFLOW

#### Step 1: Local Development & Testing
```bash
# ALWAYS run from apps/web directory
cd apps/web
npm run web

# Verify compilation and server response
curl -s http://localhost:19006 | head -5

# Run E2E tests for localhost ONLY
cd ../../
npm run test:localhost
```

**Required Verification:**
- [ ] Server compiles with "web compiled with 1 warning" (not error)
- [ ] HTTP 200 response from localhost:19006
- [ ] JavaScript bundle loads correctly
- [ ] E2E tests pass or show expected functionality
- [ ] Manual testing confirms all features work

#### Step 2: Create Feature Branch & PR
```bash
# Create feature branch (NEVER work directly on main)
git checkout -b feature/description-of-changes

# Commit with descriptive message
git add .
git commit -m "feat: detailed description with verification status"

# Push to feature branch
git push origin feature/description-of-changes

# Create PR
gh pr create --title "Feature: Description" --body "Testing notes"
```

#### Step 3: Preview Deployment Testing
```bash
# Wait for preview URL from PR
# Format: https://deploy-preview-X--frontier-family-flora.netlify.app/

# Test preview deployment
curl -s https://deploy-preview-X--frontier-family-flora.netlify.app/ | head -5

# Run E2E tests against preview (if configured)
DEPLOY_PREVIEW_URL=https://deploy-preview-X--frontier-family-flora.netlify.app/ npm run test:preview
```

**Required Verification:**
- [ ] Preview deployment builds successfully
- [ ] Preview URL loads correctly
- [ ] All functionality works on preview
- [ ] No console errors in browser
- [ ] Authentication flow tested end-to-end

#### Step 4: CI/CD Verification
```bash
# Verify all CI checks pass
gh pr checks

# Fix any failed checks before proceeding
```

**Required Verification:**
- [ ] All automated tests pass
- [ ] Build process completes successfully
- [ ] No linting errors
- [ ] Security scans pass

#### Step 5: Production Deployment
```bash
# ONLY after preview testing and CI pass
gh pr merge --squash

# Verify production deployment status (CRITICAL)
netlify api listSiteDeploys --data='{"site_id":"a2e3354b-f93c-4875-9c4d-0afb9dbdf6b9"}' | head -20

# Wait 2-10 minutes for deployment to complete
# Check deployment state is "ready" not "error" or "building"

# Test production URL
curl -s https://frontier-family-flora.netlify.app/ | head -5

# Run production verification tests
npm run test:production
```

**Required Verification:**
- [ ] Netlify deployment status shows "ready"
- [ ] Production URL responds correctly
- [ ] New bundle files deployed
- [ ] All critical user flows work
- [ ] No regressions introduced

### üõë PROHIBITED ACTIONS

**NEVER DO THESE:**
- ‚ùå `git push origin main` without PR and preview testing
- ‚ùå Run Expo commands from root directory
- ‚ùå Merge PR without preview deployment verification
- ‚ùå Deploy to production without local testing first
- ‚ùå Claim success without evidence (curl, tests, user confirmation)
- ‚ùå Skip E2E testing for critical changes
- ‚ùå Ignore compilation errors or warnings

### üìä STATUS COMMUNICATION PROTOCOL

**Use Clear Status Indicators:**
- ‚úÖ **VERIFIED WORKING** - All 5 verification steps completed with evidence
- ‚ö†Ô∏è **PARTIALLY WORKING** - Some features work, specify what doesn't
- ‚ùå **BROKEN** - Compilation errors, server failures, or critical bugs
- üîÑ **IN PROGRESS** - Currently making changes or running tests
- ‚ùì **UNKNOWN** - Need to investigate or verify status

**Evidence Requirements:**
- Always show terminal output for compilation status
- Include curl responses for server verification
- Document test results with specific pass/fail counts
- Screenshot critical UI states when needed

### üö® EMERGENCY ROLLBACK

If production is broken:
```bash
# Immediate rollback
git revert HEAD -m 1
git push origin main

# Or rollback via Netlify UI:
# Site Settings > Deploys > [Previous Deploy] > Publish Deploy
```

### üîß TROUBLESHOOTING

#### Server Won't Start
```bash
pkill -f "expo start"
cd apps/web
npm run web -- --clear
```

#### Compilation Errors
- Check babel configuration issues
- Verify NativeWind setup in babel.config.js
- Ensure all imports are correct
- Check for TypeScript errors

#### E2E Test Failures
- Verify tests run against correct environment
- Check Stagehand configuration
- Review test screenshots in test-results/ directory

### üìù ENFORCEMENT RULES

**AI Assistant Must:**
1. **STOP immediately** if user requests direct merge to main
2. **Acknowledge workflow violation** and explain why it's prohibited
3. **Redirect to proper workflow** starting with local testing
4. **Verify each step** before proceeding to next
5. **Provide evidence** for all status claims
6. **Never assume** previous state - always verify current reality

**User Approval Required For:**
- Creating feature branch and PR
- Merging to main after preview testing
- Any deviation from the 5-step workflow

### üéØ SUCCESS CRITERIA

Deployment is successful when:
- All 5 workflow steps completed with evidence
- No regressions in critical user flows
- Performance metrics maintained
- Security scans pass
- User feedback is positive

---

**Remember: This protocol exists to prevent costly mistakes and maintain user trust. Following it religiously saves time and money in the long run.**
